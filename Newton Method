import numpy as np

def newtons_method(func, grad_func, hessian_func, x0, tol=1e-6, max_iter=5):
    x = x0
    for i in range(max_iter):
        grad = grad_func(x)
        hessian = hessian_func(x)

        if np.linalg.norm(grad) < tol:
            print(f"Converged in {i} iterations.")
            return x, func(x), i

        try:
            hessian_inv = np.linalg.inv(hessian)
        except np.linalg.LinAlgError:
            print("Hessian is singular or not invertible.")
            return x, func(x), i

        x = x - np.dot(hessian_inv, grad)

    print("Maximum iterations reached without convergence.")
    return x, func(x), max_iter

def func(x):
    return x[0] ** 2 + 2 * x[1] ** 2

def grad_func(x):
    return np.array([2 * x[0], 4 * x[1]])

def hessian_func(x):
    return np.array([[2, 0], [0, 4]])

x0 = np.array([2.0, 2.0])

x_min, f_min, iterations = newtons_method(func, grad_func, hessian_func, x0)
print(f"Minimum at: {x_min}, Function value: {f_min}, Iterations: {iterations}")
